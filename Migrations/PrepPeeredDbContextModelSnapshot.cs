// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PrepPeered.Api.Data;

namespace PrepPeered.Api.Migrations
{
    [DbContext(typeof(PrepPeeredDbContext))]
    partial class PrepPeeredDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PrepPeered.Api.Entities.Dashboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("LastSetupCheckId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MyDetailsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LastSetupCheckId");

                    b.HasIndex("MyDetailsId");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Comment")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Industry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Interview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("IntervieweeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InterviewerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("OverallFeedbackId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReviewId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IntervieweeId");

                    b.HasIndex("InterviewerId");

                    b.HasIndex("OverallFeedbackId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DesiredIndustryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DesiredSeniorityLevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DesiredIndustryId");

                    b.HasIndex("DesiredSeniorityLevelId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InterviewId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("InterviewId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Reminder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ReviewId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("DashboardId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.SeniorityLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SeniorityLevels");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.SetupCheck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("HasSufficientLighting")
                        .HasColumnType("boolean");

                    b.Property<long?>("IntervieweeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAudioOn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersonInCorrectPosition")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVideoLagging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVideoOn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IntervieweeId");

                    b.ToTable("SetupChecks");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Dashboard", b =>
                {
                    b.HasOne("PrepPeered.Api.Entities.SetupCheck", "LastSetupCheck")
                        .WithMany()
                        .HasForeignKey("LastSetupCheckId");

                    b.HasOne("PrepPeered.Api.Entities.Person", "MyDetails")
                        .WithMany()
                        .HasForeignKey("MyDetailsId");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Interview", b =>
                {
                    b.HasOne("PrepPeered.Api.Entities.Person", "Interviewee")
                        .WithMany()
                        .HasForeignKey("IntervieweeId");

                    b.HasOne("PrepPeered.Api.Entities.Person", "Interviewer")
                        .WithMany()
                        .HasForeignKey("InterviewerId");

                    b.HasOne("PrepPeered.Api.Entities.Feedback", "OverallFeedback")
                        .WithMany()
                        .HasForeignKey("OverallFeedbackId");

                    b.HasOne("PrepPeered.Api.Entities.Review", null)
                        .WithMany("Interviews")
                        .HasForeignKey("ReviewId");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Person", b =>
                {
                    b.HasOne("PrepPeered.Api.Entities.Industry", "DesiredIndustry")
                        .WithMany()
                        .HasForeignKey("DesiredIndustryId");

                    b.HasOne("PrepPeered.Api.Entities.SeniorityLevel", "DesiredSeniorityLevel")
                        .WithMany()
                        .HasForeignKey("DesiredSeniorityLevelId");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Question", b =>
                {
                    b.HasOne("PrepPeered.Api.Entities.Feedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedbackId");

                    b.HasOne("PrepPeered.Api.Entities.Interview", null)
                        .WithMany("Questions")
                        .HasForeignKey("InterviewId");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Reminder", b =>
                {
                    b.HasOne("PrepPeered.Api.Entities.Review", null)
                        .WithMany("Reminders")
                        .HasForeignKey("ReviewId");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.Review", b =>
                {
                    b.HasOne("PrepPeered.Api.Entities.Dashboard", null)
                        .WithMany("Reviews")
                        .HasForeignKey("DashboardId");
                });

            modelBuilder.Entity("PrepPeered.Api.Entities.SetupCheck", b =>
                {
                    b.HasOne("PrepPeered.Api.Entities.Person", "Interviewee")
                        .WithMany()
                        .HasForeignKey("IntervieweeId");
                });
#pragma warning restore 612, 618
        }
    }
}
